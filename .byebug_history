 @tag_weights
common_tags
pp @weights
pp @weights[3.to_s]
pp @weights[3]
pp @tags
pp @weights
@tag_weights
next
    @tags.map do |tag| @tag_weights[tag.id.to_s].to_r end
    @tags.each do |tag| @tag_weights[tag.id.to_s].to_r end
    @tags.each do |tag| @tag_weights[tag.id.to_s].to_r 
    end
      @tag_weights[tag.id] = @tag_weights[tag.id.to_s].to_r
    @tags.each do |tag|
    @tag_weights = {}
GraphWeight.for(@networkable.class.name, @context)
@context
@networkable.class.name
@networkable.class
@networkable
@tags.first
ta
@tag_weights[2]
common_tags
related_similarities
related
user_similarities
continue
GraphWeight.for('Talent', :skills).refresh!
GraphWeight('Talent', :skills)
tag_weights
user_similarities
next
common_tags
tag
tag_weights
next
tag
tag_weights
tag_weights[2].to_r
tag_weights
4 / 3
(4 / 3)
(4 / 3).to:f
tags
user_similarities
tag_weights
        tag_weights[tag.id] = weights.tag_weights[tag.id.to_s]
tags.each do |tag|
weights.tag_weights
tag_weights
tags.each do |tag| tag_weights[tag.id] = weights.tag_weights[tag.id] end
weights
weigths
tags.each do |tag| tag_weights[tag.id] = weights.tag_weights[tag.id] end
tags.each do |tag| tag_weigths[tag.id] = weights.tag_weights[tag.id] end
tags.each do |tag|
self.taggable_class
