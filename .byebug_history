continue
saved_talents.to_ary.length
saved_talents.to_ary
@store[:saved_for_later]
saved_talents.delete 1
saved_talents.delete 'david-bowie'
saved_talents.delete
saved_talents
continue
saved_talent_ids
continue
@saved_talents
@saved_talents[:saved_for_later]
saved_talents[:saved_for_later]
saved_talents
saved_talent_ids
current_user
continue
saved_talents.where
saved_talents.all
saved_talents
continue
image.attachment
image.name
image.id
image.i
pp image
require 'pp'
image
continue
saved_talents.find_by( talent_id: talent.id).delete
saved_talents.find_by( talent_id: talent.id).delete!
saved_talents.find_by( talent_id: talent.id)
saved_talents.find(talent_id: talent.id)
saved_talents
saved_talents.find(id: talent.slug)
saved_talents.find(slug: talent.slug)
saved_talents.find(id: talent.id)
saved_talents.find(talent_id: talent.id)
saved_talents.find(id: talent.id)
saved_talents
talent
continue
@saved_talents
continue
pp @saved_talents.to_ary
import pp
require 'pp'
import pp
pp @saved_talents.to_ary
@saved_talents.to_ary
continue
@saved_talents.to_ary
continue
Guests::SavedTalent.new(self, talent)
n
continue
Guests::SavedTalent.new(self, talent)
Guests::SavedTalent.new(self, talent
Guests::SavedTalent.new(self, talent)
n
next
continue
@saved_talents.to_ary
@saved_talents
@saved_talents[1]
@saved_talents.second
@saved_talents.first
@saved_talents
continue
current_user.saved_talents.to_ary.first.talent
current_user.saved_talents.to_ary.first
current_user.saved_talents.to_ary.talent
current_user.saved_talents.to_ary
current_user.saved_talents
current_user.saved_talents.to_ary
current_user.saved_talents
continue
saved_talent
continue
saved_talent
continue
talent
continue
nn
n
nn
n
continue
tags.join
tags
continue
tags
continue
pic.image.url
pic
continue
Talent.where(id: similar_obj.keys)
Talent.where(id: similar_obj.keys.first[4])
Talent.where(id: [3, 2])
similar_obj.keys
similar_obj
Talent.where(id: similar_obj.keys.first[4])
continue
@talent.get_similar
continue
Talent.where id: similar_obj.keys.first(4)
similar_obj.keys.first(4)
similar_obj.keys
similar_obj
continue
similar_raw.map { |k, v| [k,v]}
similar_raw
n
nn
n
model
sibling
network_model
model
sibling
m
n
network_model
self.network_models
network_model
model
sibling
@context
n
continue
n
nn
n
nn
tag_id
n
tag_id
n
tag_id
tag_weight(2)
n
tag_weight(2)
tag_id
total_tagged
self.taggable_class.constantize.count
similarities[:genders]
similarities[:types]
similarities.types
similarities.keys
similarities.each do |similarity|
similarities
 @tag_weights
common_tags
pp @weights
pp @weights[3.to_s]
pp @weights[3]
pp @tags
pp @weights
@tag_weights
next
    @tags.map do |tag| @tag_weights[tag.id.to_s].to_r end
    @tags.each do |tag| @tag_weights[tag.id.to_s].to_r end
    @tags.each do |tag| @tag_weights[tag.id.to_s].to_r 
    end
      @tag_weights[tag.id] = @tag_weights[tag.id.to_s].to_r
    @tags.each do |tag|
    @tag_weights = {}
GraphWeight.for(@networkable.class.name, @context)
@context
@networkable.class.name
@networkable.class
@networkable
@tags.first
ta
@tag_weights[2]
common_tags
related_similarities
related
user_similarities
continue
GraphWeight.for('Talent', :skills).refresh!
GraphWeight('Talent', :skills)
tag_weights
user_similarities
next
common_tags
tag
tag_weights
next
tag
tag_weights
tag_weights[2].to_r
tag_weights
4 / 3
(4 / 3)
(4 / 3).to:f
tags
user_similarities
tag_weights
        tag_weights[tag.id] = weights.tag_weights[tag.id.to_s]
tags.each do |tag|
weights.tag_weights
tag_weights
tags.each do |tag| tag_weights[tag.id] = weights.tag_weights[tag.id] end
weights
weigths
tags.each do |tag| tag_weights[tag.id] = weights.tag_weights[tag.id] end
tags.each do |tag| tag_weigths[tag.id] = weights.tag_weights[tag.id] end
tags.each do |tag|
self.taggable_class
