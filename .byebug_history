continue
quit
continue
next
value
next
continue
options
continue
bindings[:view].link_to("x",  toggle_path(model_name: @abstract_model, id: bindings[:object].id, on: "1"))
 toggle_path(model_name: @abstract_model, id: bindings[:object].id, on: "1")
 toggle_path(model_name: @abstract_model, id: bindings[:object].id)
 toggle_path(model_name: @abstract_model)
@abstract_model
toggle_path
fv bindings[:view].link_to
continue
self.view_helper
self
self.visible
self.instance_variables
self
self.methods.sort
self.methods
self
bindings.object
bindings.bject
bindings.keys
bindings
continue
next
(!['YouTube', 'Vimeo'].include? record.oembed.provider_name)
continue
(!['YouTube', 'Vimeo'].include? record.oembed.provider_name)
continue
next
continue
next
!['YouTube', 'Vimeo'].include? record.oembed.provider_name
record.oembed.provider_name
next
continue
!['YouTube', 'Vimeo'].include? record.oembed.provider_name
!['Youtube', 'Vimeo'].include? record.oembed.provider_name
next
continue
pp _
record.oembed.provider_name
record.oembed
record.oembed.provider.name
record.oembed.provider
record.oembed
continue
next
continue
next
record.video_info.available?
record.video_info.data
next
continue
record.video_info.available?
record.video_info.usable
record.video_info.useable
record.video_info
record
info = record.video_info
record.video_info.thumbnail_large
record.video_info.url
record.video_info
record.video_info.provider
continue
next
result
next
JSON.load(uri.read)
self.data
data
open(api_url, options)
uri
continue
api_url
continue
VideoInfo.provider_api_keys = { youtube: ENV['YOUTUBE_API_KEY'], vimeo: ENV['VIMEO_ACCESS_TOKEN'] }
Article.first.article_video.video_info.data
Article.first.article_video.video_info.width
Article.first.article_video.video_info['width']
Article.first.article_video.video_info[:width]
Article.first.article_video.video_info
Article.first.article_video.video_info.width
Article.first.article_video.video_info.url
Article.first.article_video.video_info.available?
Article.first.article_video.video_info
Article.first.article_video.video_info.height
Article.first.article_video.video_info.methods
Article.first.article_video.video_info
Article.first.article_video.video_info.height
Article.first.video_info.height
Article
Video
api_url
open(api_url, options)
continue
 open(api_url, options)
api_url
options
continue
step
next
uri
continue
value
continue
Article.where('id != ? and featured', self.id).update_all(featured:false)
next
Article.where('id != ? and featured', self.id)
value
continue
bindings[:controller].controller_name
bindings[:controller].action_name
continue
value
continue
bindings[:object]
bindings[:object].featured
bindings[:object]
continue
Article.where(featured:true).update_all(featured: false)
Article.find_by_featured(true).update_all(featured: false)
Article.find_by_featured(true)
Article.find(featured: true)
next
continue
continiue
video_info.data['pictures']['sizes'].last['link']
video_info.data['pictures']['sizes'].last
video_info.data['pictures']['sizes'].sort_by{|a| a['width']}
video_info.data['pictures']['sizes'].map{|a| a['width']}
video_info.data['pictures']['sizes'].each{|a| a['width']}
video_info.data['pictures']['sizes']
video_info.data['pictures'].to_a
video_info.data['pictures']
video_info.data['pictures'].first
video_info.data['pictures']
video_info.data['pictures'].sort_by {|a| a['width'].to_i}
video_info.data['pictures'].sort_by {|a| a['width']}
video_info.data['pictures'].sort(width)
video_info.data['pictures'].first
video_info.data['pictures'].length
video_info.data['pictures']
video_info.data['pictures'].to_a
video_info.data['pictures'].map{|a|a['uri']}
video_info.data['pictures']
video_info.provider
video_info.data['pictures']
video_info.data.pictures
video_info.data
video_info
continue
VideoInfo.new(video_url)
 video_info
video_info.data
video_info.data['user']
video_info.data
video_info.view_count
 video_info
pp video_info
pp video_info.data
pp video_info._api_base
pp video_info.data
pp video_info.data.pictures
pp video_info.data
pp video_info.author
pp video_info.title
pp video_info._video
pp video_info.provider
pp video_info.embed_url
pp video_info
video_info.generate_thumbnail
video_info
info
generate_thumbnail
video_info.thumbnail_large
video_info.methods
video_info.info
video_info
continue
info
continue
@info
 @info ||= VideoInfo.new(video_url)
@info
 VideoInfo.new(video_url)
@info
continue
@video_url
video_url
VideoInfo.new(@video_url)
@info
continue
Article.images.first.article_images.first.image?
Article.images.first.article_images.first
Article.images.first
Article.images
Article.images.article_images.first
Article.first.article_images.first
pp article_video.image
article_video.image
article_video.image?
article_video.image.url
article_video.image.url(:large)
article_video.image
article_video
article_video.cover_image
video.cover_image
video?
continue
article_images.first.image.url(:large)
video?
article.video
article.video?
continue
article_images.first.image.url(:large)
article_images.first.image.url
article_images.first.image
article_images.first
article_images
next
video?
continue
@featured
@articles
continue
@articles
continue
@featured
@articles
@articles.first
next
continue
next
pp @articles
@articles
@featured
next
@articles.length
next
continue
@articles.to_a
@articles.featured
@articles.to_a.featured
@articles.featured
@articles
continue
@articles = @articles.to_a
@articles.to_a
@articles.members
